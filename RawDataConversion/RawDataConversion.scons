'''
 *  $Id: RawDataConversion.scons, 2014-04-30 17:40:58 DAMPE $
 *  Author(s):
 *    Chi WANG (chiwang@mail.ustc.edu.cn) 13/12/2013
'''

import os
Import("*")     # import all vars from SConstruct
print "\t\t\t invoke %s\n" % os.path.abspath("./")
#--------------------------------------------------------------------

targetSvc='DmpRdcSvc'
targetAlg='DmpRdcAlg'
env = envBase.Clone()
useRoot(env)
#useCLHEP(env)
useBoostPython(env)
#useOpenMP(env)

# include
env.Prepend(CPPPATH='Svc/include')
env.Prepend(CPPPATH='Alg/include')

# Use other top-1 package
#--------------------------------------------------------------------
    #+  Kernel
P1Path='../Kernel'
env.Prepend(CPPPATH=[P1Path+'/include'])
    #+  Event
P2Path='../Event'
env.Prepend(CPPPATH=P2Path+'/DmpEvent/include')
for key in subDetectors:
    includeDir=P2Path+"/"+key+'/include'
    env.Prepend(CPPPATH=[includeDir])
env.Prepend(LIBS=['DmpEvent'])
env.Prepend(LIBPATH=[P2Path])

# Add boost filesyetem
env.Append(LIBS=['boost_filesystem'])

# install share
#--------------------------------------------------------------------
ProcessThisDir("share/Connector/",prefix+"/share/Connector/")
ProcessThisDir("Svc/include/",prefix+"/include/Rdc")

# main build
#--------------------------------------------------------------------
    #+ Serivce
goal=env.SharedLibrary(targetSvc,Glob('./Svc/src/*.cc'))
Default(env.InstallAs(prefix+"/lib/lib"+targetSvc+".so",goal))
    #+ Algorithm
goal2=env.SharedLibrary(targetAlg,Glob('./Alg/src/*.cc'))
Default(env.InstallAs(prefix+"/lib/lib"+targetAlg+".so",goal2))

