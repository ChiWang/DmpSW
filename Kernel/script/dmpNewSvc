#! /bin/bash
:<<EOF
 *  $Id: dmpNewSvc, 2014-07-13 22:45:49 DAMPE $
 *  Author(s):
 *    Dong LIU (dliu13@mail.ustc.edu.cn)
 *-----------------------------------------------------
 *  use this command to create a template of service
 *-----------------------------------------------------
EOF

#-------------------------------------------------------------------
Usage(){
echo "
  Usage: (1 arguments)
    $0  ServiceName
"
exit 1
}

#-------------------------------------------------------------------
Readme(){
cat > $1/Readme.md <<EOF
        Svcorithm of DMPSW:    DmpSvc$1
>--------------------------------------------

Note:
-------------

EOF
}

#-------------------------------------------------------------------
SConstruct(){
cat > $1/SConstruct <<EOF
'''
 *  \$Id: SConstruct, 2014-04-26 20:51:42 DAMPE $
 *----------------------------------------------------------
 *  This file is automatically generated by dmpNewSvc
 *----------------------------------------------------------
 *  1. create a shared library
 *  2. install it into \$DMPSWWORK
 *  then, in your JobOpt* file could use your Svc.
 *----------------------------------------------------------
'''

import os

target='DmpSvc$1'

print "---> compiling: %s\n" % target
#--------------------------------------------------------------------
# environment
env = Environment(ENV = os.environ)
env.ParseConfig("dmpsw-config --cflags --libs")
env.ParseConfig("python-config --include --libs")  # 2 lines for binding
env.Append(LIBS=['boost_python'])
env.ParseConfig("root-config --cflags --libs")
#env.ParseConfig("clhep-config --include --libs")
#env.PrependENVPath('PATH', os.environ['G4INSTALL']+'/../../../bin')    # 2 lines for G4
#env.ParseConfig("geant4-config --cflags --libs")
#env.MergeFlags('-fopenmp')

#-------------------------------------------------------------------
# include dir. and external libs
env.Prepend(CPPPATH=['./include'])
# Add boost filesyetem
#env.Append(LIBS=['boost_filesystem'])

#-------------------------------------------------------------------
# main build
#env.Program(target,Glob("./src/*.cc"))
#Default(env.InstallAs(os.environ['DMPSWWORK']+'/bin/'+target,goal))
goal=env.SharedLibrary(target,Glob('./src/*.cc'))
Default(env.InstallAs(os.environ['DMPSWWORK']+'/lib/lib'+target+".so",goal))

EOF
}

#-------------------------------------------------------------------
Binding(){
cat > $1/src/Dmp${1}Binding.cc <<EOF
#include <boost/python.hpp>
#include "DmpSvc$1.h"

BOOST_PYTHON_MODULE(libDmpSvc$1){
  using namespace boost::python;

  class_<DmpSvc$1,boost::noncopyable,bases<DmpVSvc> >("DmpSvc$1",init<>());
}

EOF
}

#-------------------------------------------------------------------
HeaderFile(){
cat > $1/include/DmpSvc${1}.h <<EOF
#ifndef DmpSvc${1}_H
#define DmpSvc${1}_H

#include "DmpVSvc.h"

class DmpSvc${1} : public DmpVSvc{
/*
 *  DmpSvc${1}
 *
 */
public:
  DmpSvc${1}();
  ~DmpSvc${1}();

  //void Set(const std::string &type,const std::string &value);
  // if you need to set some options for your algorithm at tun time. Overload Set()
  bool Initialize();
  bool Finalize();

};

#endif

EOF
}

#-------------------------------------------------------------------
SourceFile(){
cat > $1/src/DmpSvc${1}.cc <<EOF
#include "DmpSvc$1.h"

//-------------------------------------------------------------------
DmpSvc${1}::DmpSvc${1}()
 :DmpVSvc("${1}")
{
}

//-------------------------------------------------------------------
DmpSvc${1}::~DmpSvc${1}(){
}

//-------------------------------------------------------------------
bool DmpSvc${1}::Initialize(){
  return true;
}

//-------------------------------------------------------------------
bool DmpSvc${1}::Finalize(){
  return true;
}

EOF
}

# main
#-------------------------------------------------------------------
if [ $# != 1 ];then
  Usage
fi

# layout
mkdir -p $1/include $1/src $1/share >&/dev/null

Readme $1
SConstruct $1
Binding $1
HeaderFile $1
SourceFile $1


