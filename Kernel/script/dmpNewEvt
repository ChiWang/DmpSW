#! /bin/bash
:<<EOF
 *  $Id: dmpNewEvt, 2014-07-13 22:46:01 DAMPE $
 *  Author(s):
 *    Dong LIU (dliu13@mail.ustc.edu.cn)
 *-----------------------------------------------------
 *  use this command to create a template of service
 *-----------------------------------------------------
EOF

date=`date --rfc-3339=seconds`

#-------------------------------------------------------------------
Usage(){
echo "
  Usage: (1 arguments)
    $0  EventClass
"
exit 1
}

#-------------------------------------------------------------------
Readme(){
cat > $1/Readme.md <<EOF
  Event Class of DMPSW:    DmpEvt$1
  this file is automatically generated by dmpNewEvt
>--------------------------------------------

Note:
-------------
  When you create a new Event Class , the index 'DmpEvt' is automatically added 
  to the Class Name.

  you can use
    dmpNewEvt EventClassName
  to create your own event class.
  when this done, you can add your own member variable and member functions in header file,
  realize the functions in source file.
  
  before you can use this Event Class, you should create dictionary of 
  your event class, the command is : dmpCreateDictionary
  to do this, you should:
  first, 
    cd EventClassDirectory
  next:
    dmpCreateDictionary
  now you have dictionary file in 'include/' and 'src', you can use 
    scons
  to create a shared library, install it to \$DMPSWWORK.
  after this, you can use your event class in JobOpt* file.

  Good Luck! Any question, please contact Liu Dong (dliu13@mail.ustc.edu.cn)

EOF
}

#-------------------------------------------------------------------
SConstruct(){
cat > $1/SConstruct <<EOF
'''
 *  \$Id: SConstruct, ${date} DAMPE $
 *----------------------------------------------------------
 *  This file is automatically generated by dmpNewEvt
 *----------------------------------------------------------
 *  1. create a shared library
 *  2. install it into \$DMPSWWORK
 *  then, in your JobOpt* file could use your Evt.
 *----------------------------------------------------------
'''

import os

target='DmpEvt$1'

print "---> compiling: %s\n" % target
#--------------------------------------------------------------------
# environment
env = Environment(ENV = os.environ)
env.ParseConfig("dmpsw-config --cflags --libs")
env.ParseConfig("python-config --include --libs")  # 2 lines for binding
env.Append(LIBS=['boost_python'])
env.ParseConfig("root-config --cflags --libs")
#env.ParseConfig("clhep-config --include --libs")
#env.PrependENVPath('PATH', os.environ['G4INSTALL']+'/../../../bin')    # 2 lines for G4
#env.ParseConfig("geant4-config --cflags --libs")
#env.MergeFlags('-fopenmp')

#-------------------------------------------------------------------
# include dir. and external libs
env.Prepend(CPPPATH=['./include'])
# Add boost filesyetem
#env.Append(LIBS=['boost_filesystem'])

#-------------------------------------------------------------------
# main build
#env.Program(target,Glob("./src/*.cc"))
#Default(env.InstallAs(os.environ['DMPSWWORK']+'/bin/'+target,goal))
goal=env.SharedLibrary(target,Glob('./src/*.cc'))
Default(env.InstallAs(os.environ['DMPSWWORK']+'/lib/lib'+target+".so",goal))

EOF
}

HeaderFile(){
cat > $1/include/DmpEvt${1}.h <<EOF
/* *  \$Id: DmpEvt${1}.h, ${date} DAMPE $
 *----------------------------------------------------------
 *  This file is automatically generated by dmpNewEvt
 *----------------------------------------------------------*/

#ifndef DmpEvt${1}_H
#define DmpEvt${1}_H

#include "TObject.h"

class DmpEvt${1} : public TObject{
/*
 *  DmpEvt${1}
 *
 */
public:
  DmpEvt${1}();
  ~DmpEvt${1}();

  void Reset();
  void PrintEvent() const;

private:
  
  ClassDef(DmpEvt$1,1)

};

#endif

EOF
}

SourceFile(){
cat > $1/src/DmpEvt${1}.cc <<EOF
/* *  \$Id: DmpEvt${1}.cc, ${date} DAMPE $
 *----------------------------------------------------------
 *  This file is automatically generated by dmpNewEvt
 *----------------------------------------------------------
*/

#include "DmpEvt${1}.h"

ClassImp(DmpEvt${1})

DmpEvt${1}::DmpEvt${1}()
{
}

DmpEvt${1}::~DmpEvt${1}()
{
}

void DmpEvt${1}::Reset()
{
}

void DmpEvt${1}::PrintEvent() const
{
}

EOF
}

LinkDef(){
cat > $1/include/DmpEvt${1}LinkDef.h <<EOF
#ifdef __CINT__

#pragma link off all globals;
#pragma link off all classes;
#pragma link off all functions;

#pragma link C++ class DmpEvt${1}+;

#endif

EOF
}


# main
#-------------------------------------------------------------------
if [ $# != 1 ];then
  Usage
fi

# layout
mkdir -p $1/include $1/src $1 >&/dev/null

Readme $1
SConstruct $1
HeaderFile $1
SourceFile $1
LinkDef $1

