#! /bin/bash
:<<EOF
 *  $Id: dmpNewAlg, 2014-04-26 21:55:08 DAMPE $
 *  Author(s):
 *    Chi WANG (chiwang@mail.ustc.edu.cn) 26/04/2014
 *-----------------------------------------------------
 *  use this command to create a template of algorithm
 *-----------------------------------------------------
EOF

#-------------------------------------------------------------------
Usage(){
echo "
  Usage: (1 arguments)
    $0  AlgorithmName
"
exit 1
}

#-------------------------------------------------------------------
Readme(){
cat > $1/Readme.md <<EOF
        Algorithm of DMPSW:    $1
>--------------------------------------------

Note:
-------------

EOF
}

#-------------------------------------------------------------------
SConstruct(){
cat > $1/SConstruct <<EOF
'''
 *  \$Id: SConstruct, 2014-04-26 20:51:42 DAMPE $
 *  Author(s):
 *    Chi WANG (chiwang@mail.ustc.edu.cn) 23/09/2013
 *----------------------------------------------------------
 *  1. create a shared library
 *  2. install it into \$DMPSWWORK
 *  then, in your JobOpt* file could use your Alg.
 *----------------------------------------------------------
'''

import os

target='$1'

print "---> compiling: %s\n" % target
#--------------------------------------------------------------------
# environment
env = Environment(ENV = os.environ)
env.ParseConfig("dmpsw-config --cflags --libs")
env.ParseConfig("python-config --include --libs")  # 2 lines for binding
env.Append(LIBS=['boost_python'])
#env.ParseConfig("root-config --cflags --libs")
#env.ParseConfig("clhep-config --include --libs")
#env.PrependENVPath('PATH', os.environ['G4INSTALL']+'/../../../bin')    # 2 lines for G4
#env.ParseConfig("geant4-config --cflags --libs")
#env.MergeFlags('-fopenmp')

#-------------------------------------------------------------------
# include dir. and external libs
env.Prepend(CPPPATH=['./include'])
# Add boost filesyetem
#env.Append(LIBS=['boost_filesystem-mt'])

#-------------------------------------------------------------------
# main build
goal=env.SharedLibrary(target,Glob('./src/*.cc'))
Default(env.InstallAs(os.environ['DMPSWWORK']+'/lib/libDmp'+target+".so",goal))

EOF
}

#-------------------------------------------------------------------
Binding(){
cat > $1/src/Dmp${1}Binding.cc <<EOF
#include <boost/python.hpp>
#include "Dmp$1.h"

BOOST_PYTHON_MODULE(libDmp$1){
  using namespace boost::python;

  class_<Dmp$1,boost::noncopyable,bases<DmpVAlg> >("Dmp$1",init<std::string>());
}

EOF
}

#-------------------------------------------------------------------
HeaderFile(){
cat > $1/include/Dmp${1}.h <<EOF

#ifndef Dmp${1}_H
#define Dmp${1}_H

#include "DmpVAlg.h"

class Dmp${1} : public DmpVAlg{
/*
 *  Dmp${1}
 *
 */
public:
  Dmp${1}(const std::string&);
  ~Dmp${1}();

  virtual bool Initialize();
  virtual bool ProcessThisEvent();
  virtual bool Finalize();

};

#endif

EOF
}

# main
#-------------------------------------------------------------------
if [ $# != 1 ];then
  Usage
fi

# layout
mkdir -p $1/include $1/src >&/dev/null

Readme $1
SConstruct $1
Binding $1
HeaderFile $1


