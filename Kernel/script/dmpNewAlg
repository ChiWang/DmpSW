#! /bin/bash
:<<EOF
 *  $Id: dmpNewAlg, 2014-06-29 15:34:52 DAMPE $
 *  Author(s):
 *    Chi WANG (chiwang@mail.ustc.edu.cn) 26/04/2014
 *-----------------------------------------------------
 *  use this command to create a template of algorithm
 *-----------------------------------------------------
EOF

#-------------------------------------------------------------------
Usage(){
echo "
  Usage: (1 arguments)
    $0  AlgorithmName
"
exit 1
}

#-------------------------------------------------------------------
Readme(){
cat > $1/Readme.md <<EOF
        Algorithm of DMPSW:    DmpAlg$1
>--------------------------------------------

Note:
-------------

EOF
}

#-------------------------------------------------------------------
SConstruct(){
cat > $1/SConstruct <<EOF
'''
 *  \$Id: SConstruct, 2014-04-26 20:51:42 DAMPE $
 *----------------------------------------------------------
 *  This file is automatically generated by dmpNewAlg
 *----------------------------------------------------------
 *  1. create a shared library
 *  2. install it into \$DMPSWWORK
 *  then, in your JobOpt* file could use your Alg.
 *----------------------------------------------------------
'''

import os

target='DmpAlg$1'

print "---> compiling: %s\n" % target
#--------------------------------------------------------------------
# environment
env = Environment(ENV = os.environ)
env.ParseConfig("dmpsw-config --cflags --libs")
env.ParseConfig("python-config --include --libs")  # 2 lines for binding
env.Append(LIBS=['boost_python'])
env.ParseConfig("root-config --cflags --libs")
#env.ParseConfig("clhep-config --include --libs")
#env.PrependENVPath('PATH', os.environ['G4INSTALL']+'/../../../bin')    # 2 lines for G4
#env.ParseConfig("geant4-config --cflags --libs")
#env.MergeFlags('-fopenmp')

#-------------------------------------------------------------------
# include dir. and external libs
env.Prepend(CPPPATH=['./include'])
# Add boost filesyetem
#env.Append(LIBS=['boost_filesystem'])

#-------------------------------------------------------------------
# main build
#env.Program(target,Glob("./src/*.cc"))
#Default(env.InstallAs(os.environ['DMPSWWORK']+'/bin/'+target,goal))
goal=env.SharedLibrary(target,Glob('./src/*.cc'))
Default(env.InstallAs(os.environ['DMPSWWORK']+'/lib/lib'+target+".so",goal))

EOF
}

#-------------------------------------------------------------------
Binding(){
cat > $1/src/DmpAlg${1}Binding.cc <<EOF
#include <boost/python.hpp>
#include "DmpAlg$1.h"

BOOST_PYTHON_MODULE(libDmpAlg$1){
  using namespace boost::python;

  class_<DmpAlg$1,boost::noncopyable,bases<DmpVAlg> >("DmpAlg$1",init<>());
}

EOF
}

#-------------------------------------------------------------------
HeaderFile(){
cat > $1/include/DmpAlg${1}.h <<EOF
#ifndef DmpAlg${1}_H
#define DmpAlg${1}_H

#include "DmpVAlg.h"

class DmpAlg${1} : public DmpVAlg{
/*
 *  DmpAlg${1}
 *
 */
public:
  DmpAlg${1}();
  ~DmpAlg${1}();

  //void Set(const std::string &type,const std::string &value);
  // if you need to set some options for your algorithm at run time. Overload Set()
  bool Initialize();
  bool ProcessThisEvent();
  bool Finalize();

};

#endif

EOF
}

#-------------------------------------------------------------------
SourceFile(){
cat > $1/src/DmpAlg${1}.cc <<EOF
#include "DmpAlg$1.h"

//-------------------------------------------------------------------
DmpAlg${1}::DmpAlg${1}()
 :DmpVAlg("${1}")
{
}

//-------------------------------------------------------------------
DmpAlg${1}::~DmpAlg${1}(){
}

//-------------------------------------------------------------------
bool DmpAlg${1}::Initialize(){
  return true;
}

//-------------------------------------------------------------------
bool DmpAlg${1}::ProcessThisEvent(){
  return fIniStatus;
}

//-------------------------------------------------------------------
bool DmpAlg${1}::Finalize(){
  return true;
}

EOF
}

# main
#-------------------------------------------------------------------
if [ $# != 1 ];then
  Usage
fi

# layout
mkdir -p $1/include $1/src $1/share >&/dev/null

Readme $1
SConstruct $1
Binding $1
HeaderFile $1
SourceFile $1


